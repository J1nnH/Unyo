name: Build and Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '2.x'

    - name: Install dependencies
      run: flutter pub get

    - name: Analyze code
      run: flutter analyze

    - name: Build app
      run: flutter build ${matrix.os == 'windows-latest' ? 'windows' : 'linux'}
      if: matrix.os != 'macos-latest'

    - name: Build macOS app
      run: flutter build macos --release
      if: matrix.os == 'macos-latest'

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release ${{ github.run_number }}
        body: |
          Automated release generated by GitHub Actions.
        draft: false
        prerelease: false

    - name: Upload app
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build/${{ matrix.os == 'macos-latest' ? 'macos/Build/Products/Release/' : matrix.os == 'windows-latest' ? 'windows/runner/Release/' : 'linux/' }}
        asset_name: ${matrix.os == 'macos-latest' ? 'your_app_macos.zip' : matrix.os == 'windows-latest' ? 'your_app_windows.zip' : 'your_app_linux.zip' }
        asset_content_type: application/zip
